perc_pc <- x$sdev ^ 2 / sum(x$sdev ^ 2) * 100
pca.ap = x$x
pca.ap = data.frame(pca.ap)
pca.ap[1:5,1:5]
class(v)
?voom
?filterByExpr
nrow(dge$counts)
total <- nrow(dge$counts)
keep <- filterByExpr(dge,desig,min.total.count=10)
keep <- filterByExpr(dge,design,min.total.count=10)
sum(keep)
keep <- filterByExpr(dge,design)
sum(keep)
keep <- rowSums(dge$counts)>=10
sum(keep)
dge <- dge[keep,]
v <- voom(dge, design , plot = FALSE)
?plotPCA
class(v)
str(v)
names(v$targets)
colnames(y$E)
colnames(v$E)
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
bar <- do.call("stat_summary",
list(fun = "mean", geom = "bar", fill = "grey70"))
bar
## modified DESeq2 plotPCA function, to plot additional pc dimensions
plotPCA2 <- function (object, intgroup = "condition", ntop = 500, dim1= 1,dim2 = 2,returnData = FALSE,addLabels=F,...)
{
## ... is geom_text params if addLabels is True
#### deal with different objects
if (class(object) == "DESeqTransform") {
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
mat <- t(assay(object)[select,])
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
sampleNames <- colnames(object)
}
if (class(object) == "EList") {
rv <- rowVars(object$E)
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
mat <- t(object$E[select,])
if (!all(intgroup %in% names(object$targets))) {
stop("the argument 'intgroup' should specify columns of y$samples")
}
intgroup.df <- object$targets[,intgroup, drop = FALSE]
sampleNames <- colnames(object$E)
}
######
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
intgroup.df[[intgroup]]
}
pca <- prcomp(mat)
percentVar <- pca$sdev^2/sum(pca$sdev^2)
d <- data.frame( pca$x[, dim1],pca$x[, dim2], group = group,
intgroup.df, name = sampleN)
dim_names <- paste0("PC",c(dim1,dim2))
colnames(d)[1:2] <- dim_names
if (returnData) {
attr(d, "percentVar") <- percentVar[c(dim1,dim2)]
return(d)
}
p <- ggplot(data = d, aes_string(x = dim_names[1], y = dim_names[2], color = "group")) +
geom_point(size = 3) +
xlab(paste0(dim_names[1],": ", round(percentVar[dim1] * 100), "% variance")) +
ylab(paste0(dim_names[2],": ", round(percentVar[dim2] * 100), "% variance"))
if(addLabels = T) {
p <- p +
geom_text(...)
}
return(p)
}
## modified DESeq2 plotPCA function, to plot additional pc dimensions
plotPCA2 <- function (object, intgroup = "condition", ntop = 500, dim1= 1,dim2 = 2,returnData = FALSE,addLabels=F,...)
{
## ... is geom_text params if addLabels is True
#### deal with different objects
if (class(object) == "DESeqTransform") {
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
mat <- t(assay(object)[select,])
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
sampleNames <- colnames(object)
}
if (class(object) == "EList") {
rv <- rowVars(object$E)
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
mat <- t(object$E[select,])
if (!all(intgroup %in% names(object$targets))) {
stop("the argument 'intgroup' should specify columns of y$samples")
}
intgroup.df <- object$targets[,intgroup, drop = FALSE]
sampleNames <- colnames(object$E)
}
######
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
intgroup.df[[intgroup]]
}
pca <- prcomp(mat)
percentVar <- pca$sdev^2/sum(pca$sdev^2)
d <- data.frame( pca$x[, dim1],pca$x[, dim2], group = group,
intgroup.df, name = sampleN)
dim_names <- paste0("PC",c(dim1,dim2))
colnames(d)[1:2] <- dim_names
if (returnData) {
attr(d, "percentVar") <- percentVar[c(dim1,dim2)]
return(d)
}
p <- ggplot(data = d, aes_string(x = dim_names[1], y = dim_names[2], color = "group")) +
geom_point(size = 3) +
xlab(paste0(dim_names[1],": ", round(percentVar[dim1] * 100), "% variance")) +
ylab(paste0(dim_names[2],": ", round(percentVar[dim2] * 100), "% variance"))
if(addLabels == T) {
p <- p +
geom_text(...)
}
return(p)
}
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
plotPCA2(v,"Group")
debug(plotPCA2)
plotPCA2(v,"Group")
colnames(object$targets)
head(intgroup.df)
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
plotPCA2(v,"Group")
##### PCA ###############
p <- plotPCA2(v,intgroup="Group")
ggsave(p,filename = file.path(out,"PCA.png"))
rlang::last_error()
rlang::last_trace()
?ggsave
ggsave(p,filename = file.path(out,"PCA.png"),width = 10,height = 8,units = 'in',res = 300)
ggsave(p,filename = file.path(out,"PCA.png"),width = 10,height = 8,units = 'in',resolution = 300)
?png
ggsave(p,filename = file.path(out,"PCA.png"),width = 10,height = 8,units = 'in',dpi = 300)
out
?plotMDS
plotMDS
head(v$targets)
mds <- plotMDS(v)
v$targets[,"Group"]
dge$samples
class(dge)
plotMDS2 <- function(object,intgroup,addLabels=F,...) {
if (class(object) == "EList") {
if (!all(intgroup %in% names(object$targets))) {
stop("the argument 'intgroup' should specify columns of y$samples")
}
mds <- plotMDS(object)
plot_df  <-  data.frame(
Dim1 = mds$x,
Dim2 = mds$y,
RepID = rownames(object$targets),
Group = object$targets[,intgroup])
} else if (class(object) == "DGEList") {
if (!all(intgroup %in% names(object$samples))) {
stop("the argument 'intgroup' should specify columns of y$samples")
}
mds <- plotMDS(object)
plot_df  <-  data.frame(
Dim1 = mds$x,
Dim2 = mds$y,
RepID = rownames(object$samples),
Group = object$samples,intgroup])
}
p <- ggplot(plot_df, aes(Dim1, Dim2, colour = Group)) +
geom_point(stroke = 1.5, size = 3,alpha = 1) +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2") +
if(addLabels == T) {
p <- p +
geom_text(...)
}
return(p)
}
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
p <- plotMDS2(v,intgroup = "Group")
ggsave(p,filename = file.path(out,"MDS.png"),width = 10,height = 8,units = 'in',dpi = 300)
p <- plotMDS2(dge,intgroup = "Group")
## bcv
dge <- estimateDisp(dge, design)
png(file = file.path(out,"Dispersion_estimate.png"),width = 10,height = 8,units = 'in',res = 300)
plotBCV(dge, cex = 0.5, main = "Dispersion Estimate")
dev.off()
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
##### sample heatmaps ######
sample_heatmap(v,"Group",file=file.path(out,"sample_heatmap.pdf"))
?makeContrasts
makeContrasts(contrasts="A-(B+C)/2",levels=c("A","B","C"))
con <- makeContrasts(contrasts="A-(B+C)/2",levels=c("A","B","C"))
names(con)
colnames(con)
colnames(con) <- "A-B"
con
makeContrasts(contrasts=list("A-(B+C)/2","A-B"),levels=c("A","B","C"))
comparisons
design
colnames(design) <- gsub("Group","",colnames(design))
design
map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2]})})
map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
contr.matrix <-
makeContrasts(map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])}),
levels = colnames(design)
)
contasts <- map_chr(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
contr.matrix <-
makeContrasts(contasts,
levels = colnames(design)
)
contr.matrix <- makeContrasts(contasts,
levels = colnames(design))
contr.matrix
contrasts <- map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
contr.matrix <- makeContrasts(contasts,
levels = colnames(design))
contr.matrix
test <- makeContrasts(contrasts=list("A-(B+C)/2","A-B"),levels=c("A","B","C"))
test_contrasts <- list("A-(B+C)/2","A-B")
contrasts <- map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
colnames(design)
contr.matrix <- makeContrasts(contrasts,
levels = colnames(design))
contrasts <- map(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
makeContrasts(contrasts,levels = colnames(design))
makeContrasts
makeContrasts(contrasts=c("A-(B+C)/2","A-B"),levels=c("A","B","C"))
x <- map_chr(1:nrow(comparisons), function(i) {paste0(comparisons[i,1],"-",comparisons[i,2])})
contr.matrix <- makeContrasts(x,levels = colnames(design))
makeContrasts(x,levels = colnames(design))
x
makeContrasts(c(""SLE-Arctic","Tag-Arctic"),levels = colnames(design))
makeContrasts(c("SLE-Arctic","Tag-Arctic"),levels = colnames(design))
makeContrasts(c(Tag-Arctic","SLE-Arctic"),levels = colnames(design))
makeContrasts(c("Tag-Arctic","SLE-Arctic"),levels = colnames(design))
makeContrasts(contrasts=x,levels = colnames(design))
contr.matrix <- makeContrasts(contrasts=x,levels =colnames(design))
contr.matrix
dge <- calcNormFactors(dge)
v <- voom(dge, design , plot = FALSE)
### Testing #################
fit <- lmFit(v, design)
plotSA(fit, main = "voom: Mean-variance trend")
fit2 <- contrasts.fit(fit, contrasts = contr.matrix)
efit <- eBayes(fit2)
decideTests(efit)
summary(decideTests(efit))
summary.table <- as.data.frame.matrix(summary(decideTests(efit)))
summary.table
summary.table <- t(summary.table)
summary.table
contrast_list <-
c("S_vs_N",
"W_vs_N",
"S_vs_W"
)
my_contrast_list <- list()
y <- 1
res1 <-
data.frame(topTable(
efit,
coef = contrast_list[y],
adjust = "BH",
n = nrow(dge$counts)
# sort.by = "none"
))[, c("Symbol", "logFC", "P.Value", "adj.P.Val")]
efit
###Res1####
#create contrast list
contrast_list <-
c("SLE-Arctic", "Tag-Arctic")
res1 <-
data.frame(topTable(
efit,
coef = contrast_list[y],
adjust = "BH",
n = nrow(dge$counts)
# sort.by = "none"
))[, c("Symbol", "logFC", "P.Value", "adj.P.Val")]
View(res1)
res1 <-
data.frame(topTable(
efit,
coef = contrast_list[y],
adjust = "BH",
n = nrow(dge$counts)
# sort.by = "none"
))
aPVALcutoff <- 0.05
log2FCcutval <- 1
####### Extracting results ##########
summary.table <- as.data.frame.matrix(summary(decideTests(efit,
p.value = aPVALcutoff, lfc = log2FCcutval)))
summary.table
summary.table <- t(summary.table)
newdf <-
rbind(summary.table, data.table(Down = paste0("*FC >= ", FCcutoff, "*FDR >= ", aPVALcutoff)), fill =
T)
FCcutoff <- 2
newdf <-
rbind(summary.table, data.table(Down = paste0("*FC >= ", FCcutoff, "*FDR >= ", aPVALcutoff)), fill =
T)
newdf
newdf$Group <- rownames(summary.table)
?rbind
?data.frame
newdf <-
rbind(summary.table, data.frame(Down = paste0("*FC >= ", FCcutoff, "*FDR >= ", aPVALcutoff),NotSig="",Up=""))
newdf
newdf$Group <- rownames(summary.table)
newdf <- rownames_to_column(newdf)
newdf <-
rbind(summary.table, data.frame(Down = paste0("*FC >= ", FCcutoff, "*FDR >= ", aPVALcutoff),NotSig="",Up=""))
newdf <- rownames_to_column(newdf,"Group")
newdf[newdf$Group == "1","Group"] <- ""
colnames(contr.matrix)
contrast_list <- colnames(contr.matrix)
?topTable
head(res1)
all_res <- map(contrast_list,function(c) {
##tcnt <- tcnt + 1
res <- data.frame(topTable(
efit,
coef = contrast_list[y],
adjust = "BH",
n = nrow(dge$counts)
# sort.by = "none"
))
dplyr::select(res,-AveExpr,-t,-B)
})
names(all_res) <- colnames(contr.matrix)
test <- topTreat(efit,coef=1,n=Inf,sort.by = "P")
head(test)
fcntrl_vs_Treatment.topgenes <-
rownames(fcntrl_vs_Treatment)[1:50]
fcntrl_vs_Treatment.topgenes <-
rownames(test)[1:50]
?pheatmap
class(dge)
colnames(dge)
head(rownames(dge))
dge$samples
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
custom_genes_heatmap(deg,gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,annotation_cols=NULL,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap(dge,gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,annotation_cols=NULL,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,annotation_cols=NULL,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap()
custom_genes_heatmap
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
head(dge$samples)
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap <- function(object,meta,gene_list=NULL,annotation_cols=NULL,samples=NULL,file,...) {
require("pheatmap")
## this function will take a list of gene ids - can be genes of interest, DEG's ect and
## generate a heatmap of those gene expression values
## for DESeq2 obje is rld or vst
if("DESeqDataObject" %in% class(object)) {
if(!is.null(annotation_cols)) {
if(!annotation_cols %in% colnames(colData(object))) {
stop("annotation variable is not in colData")
}
}
if(is.null(samples)) {
## use all samples
samples <- colnames(object)
} else if (sum(samples %in% colnames(object) == 0)) {
stop("samples not found in object")
}
if(is.null(gene_list)) {
stop("Must provide a gene list")
} else if(sum(gene_list %in% rownames(assay(object)))!=length(gene_list)) {
warning("Not all genes in list")
}else {
select <-  which(gene_list %in% assay(object))
anno_df <- colData(object)[samples,annotation_cols,drop=F]
anno_df <- as.data.frame(anno_df)
mat <- assay(vsd)[select,samples]
}
} else if ("ExpressionSet" %in% class(object)) {
if(!is.null(annotation_cols)) {
if(!annotation_cols %in% colnames(pData(object))) {
stop("annotation variable is not in colData")
}
}
if(is.null(samples)) {
## use all samples
samples <- colnames(object)
} else if (sum(samples %in% colnames(object) == 0)) {
stop("samples not found in object")
}
if(is.null(gene_list)) {
stop("Must provide a gene list")
} else if(sum(gene_list %in% featureNames(object))!=length(gene_list)) {
warning("Not all genes in list")
}else {
anno_df <- pData(object)[samples,annotation_cols,drop=F]
anno_df <- as.data.frame(anno_df)
mat <- exprs(object)[gene_list,samples]
}
}
else if("matrix" %in% class(object)) {
if(!is.null(annotation_cols)) {
if(!annotation_cols %in% colnames(meta)) {
stop("annotation variable is not in col")
}
}
if(is.null(samples)) {
## use all samples
samples <- colnames(object)
} else if (sum(samples %in% colnames(object) == 0)) {
stop("samples not found in object")
}
if(is.null(gene_list)) {
stop("Must provide a gene list")
} else if(sum(gene_list %in% rownames(object))!=length(gene_list)) {
warning("Not all genes in list")
}else {
anno_df <- meta[match(samples,rownames(meta)),annotation_cols,drop=F]
anno_df <- as.data.frame(anno_df)
mat <- object[gene_list,match(samples,colnames(object))]
}
}
else if("DGEList" %in% class(object)) {
if(!is.null(annotation_cols)) {
if(!annotation_cols %in% colnames(object$samples)) {
stop("annotation variable is not in samples")
}
}
if(is.null(samples)) {
## use all samples
samples <- colnames(object)
} else if (sum(samples %in% colnames(object) == 0)) {
stop("samples not found in object")
}
if(is.null(gene_list)) {
stop("Must provide a gene list")
} else if(sum(gene_list %in% rownames(object))!=length(gene_list)) {
warning("Not all genes in list")
}else {
anno_df <- object$samples[match(samples,rownames(object$samples)),annotation_cols,drop=F]
lcpms <- cpm(object,log=T)
mat <- lcpms[gene_list,match(samples,colnames(lcpms))]
}
}
if(scale) {
mat <- t(scale(t(mat)))
}
if (is.null(annotation_cols)) {
pheatmap(mat, filename = file,...)
} else {
pheatmap(mat, annotation_col = anno_df,filename=file,...)
}
}
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
cntrl_vs_Treatment.topgenes
head(all_res$`SLE-Arctic`)
fcntrl_vs_Treatment.topgenes <- rownames(all_res$`SLE-Arctic`)[1:50]
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = cntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = fcntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,scale=T,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = fcntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
source("/Volumes/GoogleDrive/My Drive/Code Repository/RNA/RNA-Seq_DE_analysis_functions.R")
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = fcntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0)
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = fcntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0,cellwidth=10)
custom_genes_heatmap(dge,annotation_cols="Group",gene_list = fcntrl_vs_Treatment.topgenes,file= "test.pdf",
col_font=10,samples=NULL,
show_rownames=F,show_colnames,row_font=5,treeheight_row = 0,scale="row",cellwidth=10)
?topTable
